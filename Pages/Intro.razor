@page "/"
@inherits MainLayout
@inject Game Game
@inject NavigationManager Navigation

<PageTitle>Tournament Fighter</PageTitle>

@if (enabledMusic)
{
    <!--<audio id="menu" autoplay src="@menuMusicSrc"></audio>-->
}

@if (pressedStart)
{
    <EditForm class="intro col-start full-h" EditContext=@editContext Model=@Player OnValidSubmit=@Submit>
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="f-large h-15 row-center">
            <p>Your name is &nbsp;</p>
            <div class="f-largeAll text-input">
                <!--<ValidationMessage For="() => Player.Name"></ValidationMessage>-->
                <InputText tabindex="1" placeholder="type here..."
                           @bind-Value=@Player.Name @ref="nameInput"></InputText>
            </div>
            @{
                enteredName = enteredTagline = !String.IsNullOrWhiteSpace(Player.Name);
            }
        </div>
        @if (enteredName)
        {
            <p class="f-medium h-10">and you've entered a fighting tournament.</p>

            <div class="f-medium h-20 row-center">
                <p>You want people to call you the &nbsp</p>
                <div class="f-mediumAll text-input">
                    <!--<ValidationMessage For="() => Player.Tagline"></ValidationMessage>-->
                    <InputText tabindex="2" placeholder="type here..."
                               @bind-Value=@Player.Tagline @ref="taglineInput"></InputText>
                </div>
                @{
                    enteredTagline = !String.IsNullOrWhiteSpace(Player.Tagline);
                }
            </div>
        }
        @if (enteredTagline)
        {
            <p class="f-medium h-15">You will be facing 3 opponents. Defeat all three and you'll win prize money and fame!</p>
            <div class="f-medium h-30 col-center">
                <p>You've been training hard, and your fighting style is:</p>
                <div class="row-end full-w">
                    <div class="row-end w-70">
                        <button class="@(build == "bal" ? "btn-radio-active" : "") btn-radio f-medium" type="button" @onclick=@SetBalancedBuild>Balanced</button>
                        <button class="@(build == "agi" ? "btn-radio-active" : "") btn-radio f-medium" type="button" @onclick=@SetAgileBuild>Agile</button>
                        <button class="@(build == "tnk" ? "btn-radio-active" : "") btn-radio f-medium" type="button" @onclick=@SetTankyBuild>Tanky</button>
                        <button class="@(build == "wiz" ? "btn-radio-active" : "") btn-radio f-medium" type="button" @onclick=@SetWizardBuild>WIZARD</button>
                    </div>
                    <button class="btn-gold f-medium" type="submit" disabled="@(!choseBuild)">Submit</button>
                </div>
            </div>
        }
    </EditForm>
}
else
{
    <h1 class="logo">TOURNAMENT</h1>
    <h1 class="logo logo-bottom">FIGHTER</h1>
    <button id="start-btn" class="btn-gold f-small" @onclick=@StartIntro>Start</button>
}

@code {
    private Character Player = new Character();

    private InputText nameInput;
    private InputText taglineInput;

    private EditContext? editContext { get; set; }
    private bool pressedStart = false;
    private bool enteredName = false;
    private bool enteredTagline = false;
    private bool choseBuild = false;
    private string build = "";

    private bool enabledMusic = false;
    private string menuMusicSrc = "media/menu.wav";

    private int maxNameLength = 20;
    private int maxTaglineLength = 20;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (pressedStart)
        {
            if (!enteredName)
            {
                editContext?.Validate();
                if (nameInput.Element.HasValue)
                {
                    await nameInput.Element.Value.FocusAsync();
                }
            }
            else if (!enteredTagline)
            {
                if (taglineInput.Element.HasValue)
                {
                    await taglineInput.Element.Value.FocusAsync();
                }
            }
        }
    }

    private void StartIntro()
    {
        pressedStart = true;
        StateHasChanged();
    }

    public void SetBalancedBuild()
    {
        Player.SetStats(100, 70, 60, 70, 70);
        Player.Moves = [Move.Punch, Move.SwordSlash, Move.GroundSlam, Move.Counter];
        choseBuild = true;
        build = "bal";
    }

    public void SetAgileBuild()
    {
        Player.SetStats(100, 90, 50, 50, 70);
        Player.Moves = [Move.Punch, Move.CrushingGrip, Move.JumpKick, Move.Counter];
        choseBuild = true;
        build = "agi";
    }

    public void SetTankyBuild()
    {
        Player.SetStats(100, 40, 90, 100, 40);
        Player.Moves = [Move.Punch, Move.CrushingGrip, Move.AxeSwing, Move.Counter];
        choseBuild = true;
        build = "tnk";
    }

    public void SetWizardBuild()
    {
        Player.SetStats(100, 50, 50, 100, 100);
        Player.Moves = [Move.IceSpike, Move.FlameImplosion, Move.CursedExcalibur, Move.RedirectLightning];
        choseBuild = true;
        build = "wiz";
    }

    public void Submit()
    {
        if (enteredName && enteredTagline && choseBuild)
        {
            Game.InitializeNewGame(Player);
            Navigation.NavigateTo("/battle");
        }
    }
}
