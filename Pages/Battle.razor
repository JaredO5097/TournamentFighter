@page "/battle"
@page "/battle/{themeId}/{playMusic}"
@inherits ComponentBase
@inject Game Game
@inject NavigationManager Navigation

<PageTitle>Battle!</PageTitle>

@if (playingBgm)
{
    <audio id="bgm" autoplay src="@bgmAudioSrc"></audio>
}
@if (playingMoveAudio)
{
    <audio id="moveSound" autoplay onended="@(() => { playingMoveAudio = false; })" src="@moveAudioSrc"></audio>
}
@if (CurrentTheme is not null)
{
    @CurrentTheme
}

<div class="battle full-h col-start">
    <div class="stats f-xxsmall row-center h-10">
        <p class="u-player">@Player.Name the @Player.Tagline</p>
        <p class="u-player">&nbsp;@Player.Health ♥ </p>
        <p>&nbsp;</p>
        @if (Player.CurrentStatus != Status.None)
        {
            <p class="@StatusClasses[Player.CurrentStatus]">@Player.CurrentStatus.ToString()</p>
        }
    </div>
    <div class="row-center h-80 full-w">
        <div class="row-start h-30 w-70">
            @if (CurrentMsg.Type != MsgType.Empty)
            {
                <p class="dialogue f-small full-w" style=@msgStyle>@dynamicMsg</p>
                <p id="damage-num" class="f-xsmall" style=@damageStyle>@damageMsg</p>
            }
        </div>
        <div class="col-center full-h w-15">
            @if (CurrentMsg.Type == MsgType.PlayerInput)
            {
                <div class="col">
                    @foreach (Move move in Player.Moves)
                    {
                        <button class="@(chosenMove == move.Name ? "btn-radio-active" : "") 
                            btn-radio f-xxsmall" type="button" @onclick="() => RecordMove(move)">@move.Name</button>
                    }
                </div>
            }
            @if (CurrentMsg.Type == MsgType.OpponentVictory)
            {
                readyForNext = false;
                <div class="col-center around h-30">
                    <button class="btn-gold f-xsmall" @onclick="CreateNewCharacter">New Character</button>
                    <button class="btn-gold f-xsmall" @onclick="TryAgain">Try Again</button>
                </div>
            } else if (CurrentMsg.Type == MsgType.PlayerVictory)
            {
                readyForNext = false;
                <button class="btn-gold f-xsmall" @onclick="NextMatch">Next Match</button>
            } else if (CurrentMsg.Type == MsgType.NewChampion)
            {
                playingBgm = false;
                hideMenuButton = true;
                msgTimerDelayScale = 2.75f;

                <audio id="fanfare" autoplay src="media/fanfare1.mp3"></audio>
                <button class="btn-gold f-xsmall" @onclick="CreateNewCharacter">New Character</button>
            } else
            {
                <button class="btn-gold f-xxsmall" @onclick=@(() => ProgressGame()) disabled="@(!readyForNext)">Next</button>
            }
        </div>
        <div class="col full-h evenly w-15">
            <div class="col">
                <button class="@(playingBgm ? "btn-radio-active" : "") 
                    btn-radio f-xxsmall" type="button" @onclick=@ToggleBgm>MUSIC</button>
            </div>
            <div class="col">
                <p class="dialogue f-xxsmall">Theme</p>
                <button class="@(themeStr == "default" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetDefaultTheme>Arena</button>
                <button class="@(themeStr == "pink" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetPinkTheme>Pink</button>
                <button class="@(themeStr == "aqua" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetAquaticTheme>Aqua</button>
                <button class="@(themeStr == "astro" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetAstroTheme>Astro</button>
            </div>
            @if (!hideMenuButton)
            {
                @if (canReturnToMain)
                {
                    <button class="btn-gold f-xxsmall" type="button" @onclick="CreateNewCharacter">Sure?</button>
                }
                else
                {
                    <button class="btn-gold f-xxsmall" type="button" @onclick="AllowReturnToMain">MENU</button>
                }
            }
        </div>
    </div>
    <div class="stats f-xxsmall row-end full-w h-10">
        <p class="u-opponent">@Opponent.Name the @Opponent.Tagline</p>
        <p class="u-opponent">&nbsp;@Opponent.Health ♥</p>
        <p>&nbsp;</p>
        @if (Opponent.CurrentStatus != Status.None)
        {
            <p class="@StatusClasses[Opponent.CurrentStatus]">@Opponent.CurrentStatus.ToString()</p>
        }
    </div>
</div>

@code {
    [Parameter] public string? themeId { get; set; }
    [Parameter] public bool? playMusic { get; set; }

    private Character Player;
    private Character Opponent;

    private static Timer _menuTimer = new();
    private static Task? _typeOutMsg;
    private CancellationTokenSource _ts = new();
    private float msgTimerDelayScale = 1f;

    private static readonly Random _rng = new();

    private RenderFragment? CurrentTheme = null;
    private string themeStr = "default";

    private Msg CurrentMsg = new(MsgType.Empty, "");
    private StringBuilder baseMsg = new();
    private StringBuilder dynamicMsg = new();
    private StringBuilder damageMsg = new();

    private string msgStyle = "";
    private string damageStyle = "";
    private string playerStatusStyle = "";
    private string opponentStatusStyle = "";

    private string chosenMove = "";
    private bool readyForNext = true;

    private bool hideMenuButton = false;
    private bool canReturnToMain = false;

    private bool playingMoveAudio = false;
    private bool playingBgm = false;
    private string moveAudioSrc = "";
    private string bgmAudioSrc = "media/music1.wav";

    private readonly List<string> Songs = new()
    {
        "media/music1.wav",
        "media/music3.wav",
    };

    private readonly Dictionary<Move, string> MoveSounds = new()
    {
        {Move.LongShot, "media/bow2.wav" },
        {Move.Punch, "media/punch1.wav" },
        {Move.SwordSlash, "media/sword3.wav" },
        {Move.AxeSwing, "media/axe1.mp3" },
        {Move.RoaringMoon, "media/sword2.wav" },
        {Move.JumpKick, "media/kick1.wav" },
        {Move.ShortShot, "media/bow1.wav" },
        {Move.Counter, "media/counter1.mp3" },
        {Move.IceSpike, "media/ice1.wav" },
        {Move.FlameImplosion, "media/fire1.wav" },
        {Move.ThousandCuts, "media/wind1.wav" },
        {Move.CursedExcalibur, "media/sword1.wav" },
        {Move.FocusedLaser, "media/laser1.wav" },
        {Move.CrushingGrip, "media/crunch1.wav" },
        {Move.GroundSlam, "media/boom1.wav" },
        {Move.RedirectLightning, "media/thunder1.wav" },
    };

    private readonly Dictionary<string, string> CharacterFonts = new()
    {
        {"Ryalt", "ErasMedium" },
        {"Dejourn", "RockwellConBold" },
        {"Hina", "LucidaHandItalic" },
        {"Grizwald", "VinerHandRegular" },
        {"Number 5", "Pixellari" },
    };

    private readonly Dictionary<Status, string> StatusClasses = new()
    {
        {Status.None, "" },
        {Status.Bleed, "bleed" },
        {Status.Burn, "burn" },
        {Status.Immobile, "immobile" },
    };

    protected override void OnInitialized()
    {

        (Player, Opponent) = Game.PlayerAndOpponent;

        _menuTimer.Interval = 3000;
        _menuTimer.Elapsed += OnMainTimeout;

        readyForNext = true;

        bgmAudioSrc = Songs[_rng.Next(0, Songs.Count)];
        playingBgm = true;

        if (Game.StoredState.HasValue)
        {
            themeStr = Game.StoredState.Value.Theme;
            playingBgm = Game.StoredState.Value.PlayMusic;
            if (themeStr == "default") { SetDefaultTheme(); }
            else if (themeStr == "pink") { SetPinkTheme(); }
            else if (themeStr == "aqua") { SetAquaticTheme(); }
            else if (themeStr == "astro") { SetAstroTheme(); }
        }

        ProgressGame(Game.LastMsg.HasValue);
    }

    private void Reset()
    {
        _ts.Cancel();
        msgStyle = "";
        damageStyle = "";
        chosenMove = "";
        baseMsg.Clear();
        dynamicMsg.Clear();
        damageMsg.Clear();
    }

    private void ProgressGame(bool replayLastMsg = false)
    {
        Reset();

        CurrentMsg = replayLastMsg ? Game.LastMsg!.Value : Game.NextMsg();
        baseMsg.Append(CurrentMsg.Message);
        dynamicMsg.Append(' ', baseMsg.Length);
        _ts = new CancellationTokenSource();
        CancellationToken ct = _ts.Token;

        MsgType type = CurrentMsg.Type;
        bool displayDamage = false;
        if (type == MsgType.PlayerInput)
        {
            readyForNext = false;
        } else if (type == MsgType.OpponentDialogue && CharacterFonts.ContainsKey(Opponent.Name))
        {
            msgStyle = "font-family: " + CharacterFonts[Opponent.Name];
        } else if (type == MsgType.Move)
        {
            moveAudioSrc = MoveSounds[CurrentMsg.Data!.Value.Move];
            playingMoveAudio = true;
        } else if (type == MsgType.Damage)
        {
            MsgPckg data = CurrentMsg.Data!.Value;
            if (data.DamageDealt > 0)
            {
                damageMsg.Append("-" + data.DamageDealt + " HP");
                displayDamage = true;
            }
        }

        Task.Run(() => TypeOutMsg(ct, displayDamage));
    }

    private void RecordMove(Move move)
    {
        Game.RecordPlayerMove(move);
        readyForNext = true;
        chosenMove = move.Name;
    }

    private void NextMatch()
    {
        Game.StoredState = new(themeStr, playingBgm);

        playingBgm = false;
        Game.NextMatch();
        Navigation.Refresh();
    }
    private void CreateNewCharacter()
    {
        Game.StoredState = new(themeStr, playingBgm);

        Navigation.NavigateTo("/");
    }
    private void TryAgain()
    {
        Game.StoredState = new(themeStr, playingBgm);
        
        playingBgm = false;
        Game.InitializeNewGame(Player);
        Navigation.Refresh();
    }

    private async void TypeOutMsg(CancellationToken ct, bool showDamage = false)
    {
        for (int i = 0; i < baseMsg.Length; i++)
        {
            if (ct.IsCancellationRequested) { break; }

            dynamicMsg[i] = baseMsg[i];
            if (dynamicMsg[i] == ' ')
            {
                await Task.Delay((int)(35 * msgTimerDelayScale));
            } else if (dynamicMsg[i] == '\n')
            {
                await Task.Delay((int)(105 * msgTimerDelayScale));
            } else
            {
                await Task.Delay((int)(15 * msgTimerDelayScale));
            }
            await InvokeAsync(StateHasChanged);
        }

        if (showDamage)
        {
            damageStyle = "display: block";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnMainTimeout(Object? source, ElapsedEventArgs e)
    {
        canReturnToMain = false;
        await InvokeAsync(StateHasChanged);
    }
    private void AllowReturnToMain()
    {
        canReturnToMain = true;
        _menuTimer.Start();
    }
    public void ToggleBgm()
    {
        playingBgm = !playingBgm;
    }
    public void SetDefaultTheme() 
    {
        themeStr = "default";
        CurrentTheme = null;
    }
    public void SetPinkTheme()
    {
        themeStr = "pink";
        CurrentTheme = @<style>
                                body {
                                    background-color: lightpink;
                                }
                                .stats {
                                    font-family: "InkFreeRegular";
                                }
                                .dialogue {
                                    font-family: "KristenRegular";
                                }
                                .u-player, .u-opponent {
                                    text-decoration: underline wavy white;
                                }
                                .btn-radio {
                                    border: 2px solid darkviolet;
                                }
                                .btn-gold {
                                    background: linear-gradient(270deg, yellow, deepskyblue);
                                    background-size: 400% 400%;
                                }
                        </style>;
    }
    public void SetAquaticTheme()
    {
        themeStr = "aqua";
        CurrentTheme = @<style>
                                body {
                                    background-color: lightblue;
                                }
                                .stats {
                                    font-family: "Papyrus";
                                }
                                .dialogue {
                                    font-family: "SegoePrintReg";
                                }
                                .u-player {
                                    text-decoration: underline solid orange;
                                }
                                .u-opponent {
                                    text-decoration: underline solid red;
                                }
                                .btn-radio {
                                    border: 2px solid green;
                                }
                                .btn-gold {
                                    background: linear-gradient(270deg, violet, yellow);
                                    background-size: 400% 400%;
                                }
                        </style>;
    }
    public void SetAstroTheme()
    {
        themeStr = "astro";
        CurrentTheme = @<style>
                                body {
                                    background-color: black;
                                }
                                .stats, .dialogue, #damage-num {
                                    color: whitesmoke;
                                }
                                .stats {
                                    font-family: "ErasMedium";
                                }
                                .dialogue {
                                    font-family: "OCRExtended";
                                }
                                .u-player {
                                    text-decoration: underline solid orangered;
                                }
                                .u-opponent {
                                    text-decoration: underline solid purple;
                                }
                                .btn-radio {
                                    border: 2px solid orangered;
                                }
                                .btn-gold {
                                    color: whitesmoke;
                                    background: linear-gradient(270deg, orangered, purple);
                                    background-size: 400% 400%;
                                }
                        </style>;
    }
}