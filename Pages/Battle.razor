@page "/battle"
@inherits MainLayout
@inject Game Game
@inject NavigationManager Navigation

<PageTitle>Battle!</PageTitle>

<div id="battle-div" class="row-start">
    <article class="col w-80">
        @if (playingBgm)
        {
            <audio id="bgm" autoplay src="@bgmAudioSrc"></audio>
        }
        @if (playingMoveAudio)
        {
            <audio id="moveSound" autoplay onended="@(() => { playingMoveAudio = false; })" src="@moveAudioSrc"></audio>
        }
        @if (CurrentMsg != MessageModel.Empty)
        {
            <article class="@(CurrentMsg.Type == MessageType.OpponentTurn ? "dialogue d-opponent" : "dialogue d-plain")">
                <p style="@msgStyle">@CurrentMsg.Message</p>
                @if (CurrentMsg.Type == MessageType.PlayerInput)
                {
                    foreach (Move move in Player.Moves)
                    {
                        <button class="btn-gold btn-small" type="button" @onclick="() => RecordMove(move)">@move.Name</button>
                    }
                }
            </article>
            if (CurrentMsg.Type == MessageType.GameOver)
            {
                readyForNext = false;
                <button class="btn-gold btn-large" @onclick="CreateNewCharacter">Create New Character</button>
                <button class="btn-gold btn-large" @onclick="TryAgain">Try Again</button>
            }
            else if (readyForNext)
            {
                <button class="btn-gold btn-large" @onclick="ProgressGame">Next</button>
            }
        }
    </article>
    <article class="col stats s-plain w-10">
        <p>@Player.Name the @Player.Tagline</p>
        <p>@Player.Health ♥ </p>
        @if (Player.CurrentStatus != Status.None)
        {
            <p>(@Player.CurrentStatus.ToString())</p>
        }
    </article>
    <article class="col stats s-opponent w-10">
        <p>@Opponent.Name the @Opponent.Tagline</p>
        <p>@Opponent.Health ♥</p>
        @if (Opponent.CurrentStatus != Status.None)
        {
            <p>(@Opponent.CurrentStatus.ToString())</p>
        }
    </article>
</div>

@code {
    private Character Player = CharacterList.Default;
    private Character Opponent = CharacterList.Default;

    private static readonly Random _rng = new();

    private MsgTracker MessageTracker = new MsgTracker();
    private MessageModel CurrentMsg = MessageModel.Empty;
    private string msgStyle = "";

    private bool readyForNext = true;

    private readonly List<string> Songs = new()
    {
        "media/music1.wav",
        "media/music3.wav",
    };

    private readonly Dictionary<Move, string> MoveSounds = new()
    {
        {Move.LongShot, "media/bow2.wav"},
        {Move.Punch, "media/punch1.wav"},
        {Move.SwordSlash, "media/sword3.wav"},
        {Move.AxeSwing, "media/axe1.mp3"},
        {Move.RoaringMoon, "media/sword2.wav"},
        {Move.JumpKick, "media/kick1.wav"},
        {Move.ShortShot, "media/bow1.wav"},
        {Move.Counter, "media/counter1.mp3"},
        {Move.IceSpike, "media/ice1.wav"},
        {Move.FlameImplosion, "media/fire1.wav"},
        {Move.ThousandCuts, "media/wind1.wav"},
        {Move.CursedExcalibur, "media/sword1.wav"},
    };

    private readonly FrozenDictionary<string, string> CharacterFonts = new Dictionary<string, string>()
    {
        {"Ryalt", "ErasMedium"},
        {"Dejourn", "RockwellConBold"},
        {"Hina", "LucidaHandItalic"},
        {"Grizwald", "VinerHandRegular" },
        {"Number5", "Pixellari" },
    }.ToFrozenDictionary();

    private bool playingMoveAudio = false;
    private bool playingBgm = false;
    private string moveAudioSrc = "";
    private string bgmAudioSrc = "";

    [CascadingParameter] public MainLayout Layout { get; set; }

    protected override void OnInitialized()
    {
        Layout.DisableMenu();
        Player = Game.Player;
        Opponent = Game.Opponent;

        MessageTracker.Clear();
        MessageTracker.Enqueue(new(MessageType.Game, "Welcome ladies and gentlemen, to the annual IRONMAN tournament!\n" +
                "It's a bright sunny day here, and we've got some great fighters for you this year!\n" +
                "Here comes our first one, " + Player.Name + "! They look like they're here to win!", Move.None));
        MessageTracker.Enqueue(new(MessageType.Game, "And here's their opponent. " + Opponent.Description, Move.None));
        //MessageTracker.Enqueue(new(MessageType.Game, Opponent.OpeningDialogue, Move.None));
        readyForNext = true;

        bgmAudioSrc = Songs[_rng.Next(0, Songs.Count)];
        playingBgm = true;
        ProgressGame();
    }

    private void ProgressGame()
    {
        msgStyle = "";
        if (MessageTracker.Count == 0)
        {
            Game.NextTurn(MessageTracker);
        }

        CurrentMsg = MessageTracker.Dequeue();
        if (CurrentMsg.Type == MessageType.PlayerInput)
        {
            readyForNext = false;
        } else if (CurrentMsg.Type == MessageType.OpponentDialogue && CharacterFonts.ContainsKey(Opponent.Name))
        {
            msgStyle = "font-family: " + CharacterFonts[Opponent.Name];
        }

        if (MoveSounds.ContainsKey(CurrentMsg.Move))
        {
            moveAudioSrc = MoveSounds[CurrentMsg.Move];
            playingMoveAudio = true;
        }
    }

    private void RecordMove(Move move)
    {
        Game.RecordPlayerMove(move);
        readyForNext = true;
    }

    private void CreateNewCharacter()
    {
        Navigation.NavigateTo("/intro");
    }

    private void TryAgain()
    {
        Game.SetUpWithExistingPlayer();
        Navigation.Refresh();
    }
}