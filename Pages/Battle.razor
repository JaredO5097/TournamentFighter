@page "/battle"
@inherits ComponentBase
@inject Game Game
@inject NavigationManager Navigation

<PageTitle>Battle!</PageTitle>

@if (playingBgm)
{
    <audio id="bgm" autoplay src="@bgmAudioSrc"></audio>
}
@if (playingMoveAudio)
{
    <audio id="moveSound" autoplay onended="@(() => { playingMoveAudio = false; })" src="@moveAudioSrc"></audio>
}
@if (CurrentTheme is not null)
{
    @CurrentTheme
}

<div class="full-h col-start">
    <div class="stats f-xxsmall row-center h-10">
        <p>@Player.Name the @Player.Tagline</p>
        <p>&nbsp;@Player.Health ♥ </p>
        @if (Player.CurrentStatus != Status.None)
        {
            <p>&nbsp;(@Player.CurrentStatus.ToString())</p>
        }
    </div>
    <div class="row-center h-80 full-w">
        @if (CurrentMsg != MessageModel.Empty)
        {
            <p class="dialogue f-small w-70" style=@msgStyle>@dynamicMsg</p>
        }
        <div class="col-center full-h w-15">
            @if (CurrentMsg != MessageModel.Empty && CurrentMsg.Type == MessageType.PlayerInput)
            {
                <div class="col">
                    @foreach (Move move in Player.Moves)
                    {
                        <button class="@(chosenMove == move.Name ? "btn-radio-active" : "") 
                            btn-radio f-xxsmall" type="button" @onclick="() => RecordMove(move)">@move.Name</button>
                    }
                </div>
            }
            @if (CurrentMsg.Type == MessageType.OpponentVictory)
            {
                readyForNext = false;
                <button class="btn-gold f-xsmall" @onclick="CreateNewCharacter">New Character</button>
                <button class="btn-gold f-xsmall" @onclick="TryAgain">Try Again</button>
            } else if (CurrentMsg.Type == MessageType.PlayerVictory)
            {
                readyForNext = false;
                <button class="btn-gold f-xsmall" @onclick="NextMatch">Next Match</button>
            } else if (CurrentMsg.Type == MessageType.NewChampion)
            {
                <button class="btn-gold f-xsmall" @onclick="CreateNewCharacter">Create New Character</button>
            } else
            {
                <button class="btn-gold f-xxsmall" @onclick="ProgressGame" disabled="@(!readyForNext)">Next</button>
            }
        </div>
        <div class="col full-h evenly w-15">
            <button class="@(playingBgm ? "btn-radio-active" : "") 
                btn-radio f-xxsmall" type="button" @onclick=@ToggleBgm>MUSIC</button>
            <div class="col">
                <p class="dialogue f-xxsmall">Theme</p>
                <button class="@(themeStr == "default" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetDefaultTheme>Arena</button>
                <button class="@(themeStr == "pink" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetPinkTheme>Pink</button>
                <button class="@(themeStr == "aqua" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetAquaticTheme>Aqua</button>
                <button class="@(themeStr == "astro" ? "btn-radio-active" : "")
                    btn-radio f-xxsmall" type="button" @onclick=@SetAstroTheme>Astro</button>
            </div>
            @if (canReturnToMain)
            {
                <button class="btn-gold f-xxsmall" type="button" @onclick="CreateNewCharacter">Sure?</button>
            } else
            {
                <button class="btn-gold f-xxsmall" type="button" @onclick="AllowReturnToMain">MENU</button>
            }
        </div>
    </div>
    <div class="stats f-xxsmall s-opponent row-end full-w h-10">
        <p>@Opponent.Name the @Opponent.Tagline</p>
        <p>&nbsp;@Opponent.Health ♥</p>
        @if (Opponent.CurrentStatus != Status.None)
        {
            <p>&nbsp;(@Opponent.CurrentStatus.ToString())</p>
        }
    </div>
</div>

@code {
    private Character Player = CharacterList.Default;
    private Character Opponent = CharacterList.Default;

    private static Timer _menuTimer = new Timer();
    private static Task? _typeOutMsg;

    private static readonly Random _rng = new();

    private RenderFragment? CurrentTheme = null;
    private string themeStr = "default";

    private MsgTracker MessageTracker = new MsgTracker();
    private MessageModel CurrentMsg = MessageModel.Empty;
    private StringBuilder baseMsg = new StringBuilder();
    private StringBuilder dynamicMsg = new StringBuilder();
    private string msgStyle = "";

    private string chosenMove = "";
    private bool readyForNext = true;

    private bool canReturnToMain = false;

    private bool playingMoveAudio = false;
    private bool playingBgm = false;
    private string moveAudioSrc = "";
    private string bgmAudioSrc = "media/music1.wav";

    private readonly List<string> Songs = new()
    {
        "media/music1.wav",
        "media/music3.wav",
    };

    private readonly Dictionary<Move, string> MoveSounds = new()
    {
        {Move.LongShot, "media/bow2.wav" },
        {Move.Punch, "media/punch1.wav" },
        {Move.SwordSlash, "media/sword3.wav" },
        {Move.AxeSwing, "media/axe1.mp3" },
        {Move.RoaringMoon, "media/sword2.wav" },
        {Move.JumpKick, "media/kick1.wav" },
        {Move.ShortShot, "media/bow1.wav" },
        {Move.Counter, "media/counter1.mp3" },
        {Move.IceSpike, "media/ice1.wav" },
        {Move.FlameImplosion, "media/fire1.wav" },
        {Move.ThousandCuts, "media/wind1.wav" },
        {Move.CursedExcalibur, "media/sword1.wav" },
        {Move.FocusedLaser, "media/laser1.wav" },
        {Move.CrushingGrip, "media/crunch1.wav" },
        {Move.GroundSlam, "media/boom1.wav" },
        {Move.RedirectLightning, "media/thunder1.wav" },
    };

    private readonly FrozenDictionary<string, string> CharacterFonts = new Dictionary<string, string>()
    {
        {"Ryalt", "ErasMedium" },
        {"Dejourn", "RockwellConBold" },
        {"Hina", "LucidaHandItalic" },
        {"Grizwald", "VinerHandRegular" },
        {"Number 5", "Pixellari" },
    }.ToFrozenDictionary();

    protected override void OnInitialized()
    {
        Player = Game.Player;
        Opponent = Game.Opponent;

        _menuTimer.Interval = 3000;
        _menuTimer.Elapsed += OnMainTimeout;

        MessageTracker.Clear();
        Game.SetIntroMessages(MessageTracker);

        readyForNext = true;

        bgmAudioSrc = Songs[_rng.Next(0, Songs.Count)];
        playingBgm = true;
        ProgressGame();
    }

    private void ProgressGame()
    {
        msgStyle = "";
        chosenMove = "";
        baseMsg.Clear();
        dynamicMsg.Clear();
        _typeOutMsg?.Dispose();
        _typeOutMsg = new Task(TypeOutMsg);

        if (MessageTracker.Count == 0)
        {
            Game.NextTurn(MessageTracker);
        }

        CurrentMsg = MessageTracker.Dequeue();
        baseMsg.Append(CurrentMsg.Message);
        dynamicMsg.Append(' ', baseMsg.Length);
        _typeOutMsg.Start();

        if (CurrentMsg.Type == MessageType.PlayerInput)
        {
            readyForNext = false;
        } else if (CurrentMsg.Type == MessageType.OpponentDialogue && CharacterFonts.ContainsKey(Opponent.Name))
        {
            msgStyle = "font-family: " + CharacterFonts[Opponent.Name];
        }

        if (MoveSounds.ContainsKey(CurrentMsg.Move))
        {
            moveAudioSrc = MoveSounds[CurrentMsg.Move];
            playingMoveAudio = true;
        }
    }

    private void RecordMove(Move move)
    {
        Game.RecordPlayerMove(move);
        readyForNext = true;
        chosenMove = move.Name;
    }

    private void NextMatch()
    {
        playingBgm = false;
        Game.NextMatch();
        Navigation.Refresh();
    }
    private void CreateNewCharacter()
    {
        Navigation.NavigateTo("/");
    }
    private void TryAgain()
    {
        playingBgm = false;
        Game.InitializeNewGame(Player);
        Navigation.Refresh();
    }

    private async void TypeOutMsg()
    {
        for (int i = 0; i < baseMsg.Length; i++)
        {
            dynamicMsg[i] = baseMsg[i];
            await Task.Delay(35);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnMainTimeout(Object? source, ElapsedEventArgs e)
    {
        canReturnToMain = false;
        await InvokeAsync(StateHasChanged);
    }
    private void AllowReturnToMain()
    {
        canReturnToMain = true;
        _menuTimer.Start();
    }
    public void ToggleBgm()
    {
        playingBgm = !playingBgm;
    }
    public void SetDefaultTheme() 
    {
        themeStr = "default";
        CurrentTheme = null;
    }
    public void SetPinkTheme()
    {
        themeStr = "pink";
        CurrentTheme = @<style>
                                body {
                                    background-color: lightpink;
                                }
                        </style>;
    }
    public void SetAquaticTheme()
    {
        themeStr = "aqua";
        CurrentTheme = @<style>
                                body {
                                    background-color: lightblue;
                                }
                        </style>;
    }
    public void SetAstroTheme()
    {
        themeStr = "astro";
        CurrentTheme = @<style>
                                body {
                                    background-color: whitesmoke;
                                }
                        </style>;
    }
}