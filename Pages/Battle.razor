@page "/battle"
@inject Game Game
@inject NavigationManager Navigation

<PageTitle>Battle!</PageTitle>

<div id="battle-div" class="row-center">
    <div class="col w-20">
        <button class="btn-gold btn-small" @onclick="@(() => showingOpponentStats = !showingOpponentStats)">Opponent Stats</button>
        @if (showingOpponentStats)
        {
            <article class="stats s-opponent">
                <h1>@Opponent.Name</h1>
                <p>The @Opponent.Tagline</p>
                <h2>Health ♥</h2>
                <p>@Opponent.Health</p>
                <h2>Status Effects</h2>
                <p>@Opponent.CurrentStatus.ToString()</p>
                <h2>Moves</h2>
                @if (OpponentRevealedMoves.Count == 0)
                {
                    <p>???</p>
                }
                else
                {
                    @foreach (Move move in OpponentRevealedMoves.Keys)
                    {
                        if (move != Move.None)
                        {
                            <p>@move.Name</p>
                        }
                    }
                }
            </article>
        }
    </div>
    <div class="col w-60">
        @if (CurrentMsg != MessageModel.Empty)
        {
            <article class="@(CurrentMsg.Type == MessageType.OpponentTurn ? "dialogue d-opponent" : "dialogue d-plain")">
                <p>@CurrentMsg.Message</p>
                @if (CurrentMsg.Type == MessageType.PlayerInput)
                {
                    foreach (Move move in Player.Moves)
                    {
                        <button class="btn-gold btn-small" type="button" @onclick="() => RecordMove(move)">@move.Name</button>
                    }
                }
            </article>
            if (CurrentMsg.Type == MessageType.GameOver)
            {
                readyForNext = false;
                <button class="btn-gold btn-large" @onclick="NewGame">New Game</button>
            }
            else if (readyForNext)
            {
                <button class="btn-gold btn-large" @onclick="ProgressGame">Next</button>
            }
        }

    </div>
    <div class="col w-20">
        <button class="btn-gold btn-small" @onclick="@(() => showingPlayerStats = !showingPlayerStats)">Your Stats</button>
        @if (showingPlayerStats)
        {
            <article class="stats s-plain">
                <h1>@Player.Name</h1>
                <p>The @Player.Tagline</p>
                <h2>Health ♥</h2>
                <p>@Player.Health</p>
                <h2>Status Effects</h2>
                <p>@Player.CurrentStatus.ToString()</p>
                <h2>Stats</h2>
                <p>Agility: &nbsp @Player.Agility</p>
                <p>Defense: &nbsp @Player.Defense</p>
                <p>Strength: &nbsp @Player.Strength</p>
                <p>Accuracy: &nbsp @Player.Accuracy</p>
                <p>Evasion: &nbsp @Player.Evasion</p>
            </article>
        }
    </div>
</div>

@code {
    private Character Player = CharacterList.Default;
    private Character Opponent = CharacterList.Default;

    private Queue<MessageModel> MessageTracker = new Queue<MessageModel>();
    private MessageModel CurrentMsg = MessageModel.Empty;

    private bool readyForNext = true;

    private Dictionary<Move, bool> OpponentRevealedMoves = new Dictionary<Move, bool>();

    private bool showingPlayerStats = true;
    private bool showingOpponentStats = true;

    protected override void OnInitialized()
    {
        Player = Game.Player;
        Opponent = Game.Opponent;
        MessageTracker.Clear();
        MessageTracker.Enqueue(new(MessageType.Game, "Let's begin!\n" +
                "You enter the sandy arena. You see a clear blue sky above, and feel warm sunlight on your skin.\n" +
                "Opposite you stands " + Opponent.Description, Move.None));
        MessageTracker.Enqueue(new(MessageType.Game, Opponent.OpeningDialogue, Move.None));
        ProgressGame();
    }

    private void ProgressGame()
    {
        if (MessageTracker.Count == 0)
        {
            Game.NextTurn(MessageTracker);
        }

        CurrentMsg = MessageTracker.Dequeue();
        if (CurrentMsg.Type == MessageType.OpponentTurn)
        {
            OpponentRevealedMoves[CurrentMsg.Move] = true;
            // bool doesn't matter, just using a dictionary to avoid checking for duplicates. Aka LAZY
        }
        else if (CurrentMsg.Type == MessageType.PlayerInput)
        {
            readyForNext = false;
        }
    }

    private void RecordMove(Move move)
    {
        Game.RecordPlayerMove(move);
        readyForNext = true;
    }

    private void NewGame()
    {
        Navigation.NavigateTo("/intro");
    }
}