@page "/battle"
@inject Game Game
@inject NavigationManager Navigation

<PageTitle>Battle!</PageTitle>

<div id="battle-div" class="row-center">
    <div class="col w-20">
        <button class="btn-gold btn-small" @onclick="@(() => showingOpponentStats = !showingOpponentStats)">Opponent Stats</button>
        @if (showingOpponentStats)
        {
            <article class="stats s-opponent">
                <h1>@Opponent.Name</h1>
                <p>The @Opponent.Tagline</p>
                <h2>Health ♥</h2>
                <p>@Opponent.Health</p>
                <h2>Status Effects</h2>
                <p>@Opponent.CurrentStatus.ToString()</p>
                <h2>Moves</h2>
                @if (OpponentRevealedMoves.Count == 0)
                {
                    <p>???</p>
                }
                else
                {
                    @foreach (Move move in OpponentRevealedMoves.Keys)
                    {
                        if (move != Move.None)
                        {
                            <p>@move.Name</p>
                        }
                    }
                }
            </article>
        }
    </div>
    <div class="col w-60">
        @if (playingMoveAudio)
        {
            <audio id="moveSound" autoplay onended="@(() => { playingMoveAudio = false; })" src="@moveAudioSrc"></audio>
        }
        @if (CurrentMsg != MessageModel.Empty)
        {
            <article class="@(CurrentMsg.Type == MessageType.OpponentTurn ? "dialogue d-opponent" : "dialogue d-plain")">
                <p>@CurrentMsg.Message</p>
                @if (CurrentMsg.Type == MessageType.PlayerInput)
                {
                    foreach (Move move in Player.Moves)
                    {
                        <button class="btn-gold btn-small" type="button" @onclick="() => RecordMove(move)">@move.Name</button>
                    }
                }
            </article>
            if (CurrentMsg.Type == MessageType.GameOver)
            {
                readyForNext = false;
                <button class="btn-gold btn-large" @onclick="CreateNewCharacter">Create New Character</button>
                <button class="btn-gold btn-large" @onclick="TryAgain">Try Again</button>
            }
            else if (readyForNext)
            {
                <button class="btn-gold btn-large" @onclick="ProgressGame">Next</button>
            }
        }

    </div>
    <div class="col w-20">
        <button class="btn-gold btn-small" @onclick="@(() => showingPlayerStats = !showingPlayerStats)">Your Stats</button>
        @if (showingPlayerStats)
        {
            <article class="stats s-plain">
                <h1>@Player.Name</h1>
                <p>The @Player.Tagline</p>
                <h2>Health ♥</h2>
                <p>@Player.Health</p>
                <h2>Status Effects</h2>
                <p>@Player.CurrentStatus.ToString()</p>
                <h2>Stats</h2>
                <p>Agility: &nbsp @Player.Agility</p>
                <p>Defense: &nbsp @Player.Defense</p>
                <p>Strength: &nbsp @Player.Strength</p>
                <p>Accuracy: &nbsp @Player.Accuracy</p>
                <p>Evasion: &nbsp @Player.Evasion</p>
            </article>
        }
    </div>
</div>

@code {
    private Character Player = CharacterList.Default;
    private Character Opponent = CharacterList.Default;

    private Queue<MessageModel> MessageTracker = new Queue<MessageModel>();
    private MessageModel CurrentMsg = MessageModel.Empty;

    private bool readyForNext = true;

    private Dictionary<Move, bool> OpponentRevealedMoves = new Dictionary<Move, bool>();

    private readonly Dictionary<Move, string> MoveSounds = new()
    {
        {Move.LongShot, ""},
        {Move.Punch, ""},
        {Move.SwordSlash, ""},
        {Move.AxeSwing, ""},
        {Move.RoaringMoon, ""},
        {Move.JumpKick, ""},
        {Move.ShortShot, "media/bow1.wav"},
        {Move.Counter, ""},
        {Move.IceSpike, ""},
        {Move.FlameImplosion, ""},
        {Move.ThousandCuts, ""},
        {Move.CursedExcalibur, ""},
    };

    private bool playingMoveAudio = false;
    private string moveAudioSrc = "";

    private bool showingPlayerStats = true;
    private bool showingOpponentStats = true;

    protected override void OnInitialized()
    {
        Player = Game.Player;
        Opponent = Game.Opponent;
        MessageTracker.Clear();
        MessageTracker.Enqueue(new(MessageType.Game, "Welcome ladies and gentlemen, to the annual IRONMAN tournament!\n" +
                "It's a bright sunny day here, and we've got some great fighters for you this year!\n" +
                "Here comes our first one, " + Player.Name + "! They look like they're here to win!", Move.None));
        MessageTracker.Enqueue(new(MessageType.Game, "And here's their opponent. " + Opponent.Description, Move.None));
        MessageTracker.Enqueue(new(MessageType.Game, Opponent.OpeningDialogue, Move.None));
        readyForNext = true;
        ProgressGame();
    }

    private void ProgressGame()
    {
        if (MessageTracker.Count == 0)
        {
            Game.NextTurn(MessageTracker);
        }

        CurrentMsg = MessageTracker.Dequeue();
        if (CurrentMsg.Type == MessageType.OpponentTurn)
        {
            OpponentRevealedMoves[CurrentMsg.Move] = true; // just using a dictionary to avoid checking for duplicates

            moveAudioSrc = MoveSounds[CurrentMsg.Move];
            playingMoveAudio = true;
        }
        else if (CurrentMsg.Type == MessageType.PlayerInput)
        {
            readyForNext = false;
        }
    }

    private void RecordMove(Move move)
    {
        Game.RecordPlayerMove(move);
        readyForNext = true;
    }

    private void CreateNewCharacter()
    {
        Navigation.NavigateTo("/intro");
    }

    private void TryAgain()
    {
        Game.SetUpWithExistingPlayer();
        OnInitialized();
    }
}